// import { DataTypes, Model, INTEGER  } from 'sequelize'; 
// import db from '.';
// // import OtherModel from './OtherModel';

// // tive explicação de Guilherme Soares para entender um melhor este arquivo.
// class User extends Model {
//   public id: number; 
//   public username: string;  
//   public role: string;
//   public email: string;
//   public password: string;
// }

// User.init({
//   id: {
//     type: INTEGER,
//     allowNull: false,
//     primaryKey: true,
//     autoIncrement: true,
//   },
//   username: {
//     type: DataTypes.STRING,
//     allowNull: false
//   },
//     role: {
//       type: DataTypes.STRING,
//       allowNull: false,
//     },
//     email: {
//       type: DataTypes.STRING,
//       allowNull: false,
//     },
//     password: {
//       type: DataTypes.STRING,
//       allowNull: false,
//     }
//   // ... Campos // 
// }, {
//   // ... Outras configs
//   underscored: true,
//   sequelize: db,
//   // modelName: 'example',
//   timestamps: false,
// });

// /**
//   * `Workaround` para aplicar as associations em TS: 
//   * Associations 1:N devem ficar em uma das instâncias de modelo
//   * */

// // OtherModel.belongsTo(Example, { foreignKey: 'campoA', as: 'campoEstrangeiroA' });
// // OtherModel.belongsTo(Example, { foreignKey: 'campoB', as: 'campoEstrangeiroB' });

// // Example.hasMany(OtherModel, { foreignKey: 'campoC', as: 'campoEstrangeiroC' });
// // Example.hasMany(OtherModel, { foreignKey: 'campoD', as: 'campoEstrangeiroD' });

// export default User;
